function buildArena() {
    var arena = new THREE.Object3D();
    var floorGeom = new THREE.PlaneGeometry(270, 270);
    var floorTex = new THREE.ImageUtils.loadTexture('arena.png');
   // var floorMat = new THREE.MeshBasicMaterial( { color: 0x003399 } );
    var floorMat = new THREE.MeshBasicMaterial( { map: floorTex } );
    var floorMesh = new THREE.Mesh(floorGeom, floorMat);
    var light = new THREE.DirectionalLight({color: 0xffffff, castShadow: true});
    var lighttwo = new THREE.DirectionalLight({color: 0x333333, castShadow: true});
    light.position.set(1, 1, 1);
    lighttwo.position.set(-1, -1, -1);
    floorMesh.position = new THREE.Vector3(0, 0, 0);
    arena.add(floorMesh);
    arena.add(lighttwo);
    arena.add(light);

    for(var i=0; i<3; i++) {
	var chicken = makeChicken();
	chicken.position.x= 39 + 34*i;
	chicken.position.y= -20;
	arena.add(chicken);
    };
    var osow = makeOSOW();
    osow.position.x= 117;
    osow.position.y= 3;
    arena.add(osow);
    
    var largeturbinebase = makeLargeTurbineBase();
    largeturbinebase.position.x = 20;
    largeturbinebase.position.y = 50;
    arena.add(largeturbinebase);
    
    var smallnacelle = makeSmallNacelle();
    smallnacelle.position.x = 0;
    smallnacelle.position.y = 0;
    arena.add(smallnacelle); 
    return arena;
};

function makeChicken () {
    var chicken = new THREE.Object3D();
    var x1geom=new THREE.SphereGeometry(3, 16, 32);
    var c1geom=new THREE.CylinderGeometry(2,2,7);
    var c1mat=new THREE.MeshLambertMaterial( { color: 0x888888 } );
    var c1mesh=new THREE.Mesh(c1geom,c1mat);
    c1mesh.rotateX(Math.PI/2.0);
    c1mesh.position.z = 3.5;
    var x1mesh=new THREE.Mesh(x1geom,c1mat);
    x1mesh.position.z = 7;
    chicken.add(c1mesh);
    chicken.add(x1mesh);
    return chicken;
};
function makeOSOW () {
    var osow = new THREE.Object3D();
    var osowbasegeo = new THREE.BoxGeometry(24, 0.25, 32);
    var osowlegbasegeo = new THREE.BoxGeometry(36, 2, 4);
    var osowlegonegeo = new THREE.BoxGeometry(1, 24, 4);
    var osowlegtwogeo = new THREE.BoxGeometry(1, 24, 4);
    var osowmat = new THREE.MeshLambertMaterial({color: 0xffaa33});
    var osowbase = new THREE.Mesh(osowbasegeo, osowmat);
    var osowlegbase = new THREE.Mesh(osowlegbasegeo, osowmat);
    var osowlegone = new THREE.Mesh(osowlegonegeo, osowmat);
    var osowlegtwo = new THREE.Mesh(osowlegtwogeo, osowmat);
    osowbase.position.z = 20;
    osowlegbase.position.z = 2;
    osowlegone.position.z = 0.5;
    osowlegone.position.x = 18;
    osowlegtwo.position.z = 2;
    osowlegtwo.position.x = -18;
    osow.add(osowbase);
    osow.add(osowlegbase);
    osow.add(osowlegone);
    osow.add(osowlegtwo);
    return osow;
};
function makeLargeTurbineBase () {
    var largeturbinebase = new THREE.Object3D();
    var LTBbottomgeo = new THREE.BoxGeometry(6, 10, 0.25);
    var LTBwoodmat = new THREE.MeshLambertMaterial({color: 0xffaa33});
    var LTBmedPVCgeo = new THREE.CylinderGeometry(1, 1, 10, 16, 1, true);
    var LTBPVCmat = new THREE.MeshLambertMaterial({color: 0x888888, side: THREE.DoubleSide});
    var LTBsmlPVCgeo = new THREE.CylinderGeometry(0.5, 0.5, 10, 16, 1, true);
    var LTBbladehubgeo = new THREE.CylinderGeometry(7, 7, 2, 6, 1, false);
    var LTBstandgeo = new THREE.CylinderGeometry(4, 4, 36, 16, 1, true);
    var LTBstandbasegeo = new THREE.BoxGeometry(18, 24, 0.75);
    var LTBstandbackgeo = new THREE.BoxGeometry(4, 1, 36);
    var LTBstandslabgeo = new THREE.BoxGeometry(16, 16, 1);
    var LTBstandslabmat = new THREE.MeshLambertMaterial({color: 0x666666});
    var radius  = Math.sqrt(1.25) + Math.sqrt(3);
    for (var l = 0; l < 6; l++) {
	var theta = l * Math.PI / 3 + Math.PI / 6;
	var x = Math.sin(theta) * radius;
	var z = 40 + Math.cos(theta) * radius;
	var mesh2 = new THREE.Mesh(LTBsmlPVCgeo, LTBPVCmat);
	mesh2.castShadow = true;
	mesh2.receiveShadow = true;
	mesh2.position.set(x, 8, z);
	largeturbinebase.add(mesh2);
    };
    var r = 2;
    for (var j = 0; j < 6; j++) {
	var theta = j * Math.PI / 3;
	var x = Math.sin(theta) * r;
	var z = 40 + Math.cos(theta) * r;
	var mesh = new THREE.Mesh(LTBmedPVCgeo, LTBPVCmat);
	mesh.castShadow = true;
	mesh.receiveShadow = true;
	mesh.position.set(x, 8, z);
	largeturbinebase.add(mesh);
    };
    var LTBlgPVCgeo = new THREE.CylinderGeometry(1, 1, 17, 16, 1, true);
    var LTBlgPVC = new THREE.Mesh(LTBlgPVCgeo, LTBPVCmat);
    var LTBbottom = new THREE.Mesh(LTBbottomgeo, LTBwoodmat);
    var LTBstand = new THREE.Mesh(LTBstandgeo, LTBPVCmat);
    var LTBstandbase = new THREE.Mesh(LTBstandbasegeo, LTBwoodmat);
    var LTBbladehub =  new THREE.Mesh(LTBbladehubgeo, LTBwoodmat);
    var LTBstandback = new THREE.Mesh(LTBstandbackgeo, LTBwoodmat);
    var LTBstandslab = new THREE.Mesh(LTBstandslabgeo, LTBstandslabmat);
    largeturbinebase.add(LTBstandslab);
    largeturbinebase.add(LTBstandback);
    largeturbinebase.add(LTBbladehub);
    largeturbinebase.add(LTBstand);
    largeturbinebase.add(LTBbottom);
    largeturbinebase.add(LTBlgPVC);
    largeturbinebase.add(LTBstandbase);
    LTBstandslab.castShadow = true;
    LTBstandback.castShadow = true;
    LTBbladehub.castShadow = true;
    LTBstand.castShadow = true;
    LTBbottom.castShadow = true;
    LTBlgPVC.castShadow = true;
    LTBstandbase.castShadow = true;
    LTBstandback.receiveShadow = true;
    LTBbladehub.receiveShadow = true;
    LTBstand.receiveShadow = true;
    LTBbottom.receiveShadow = true;
    LTBlgPVC.receiveShadow = true;
    LTBstandbase.receiveShadow = true;
    LTBstandslab.receiveShadow = true;
    LTBstandslab.position.z = 1.5;
    LTBstandslab.position.y = -4;
    LTBstandback.position.y = 12;
    LTBstandback.position.z = 18;
    LTBbladehub.position.z = 40;
    LTBbladehub.position.y = -.5;
    LTBbladehub.rotation.y = Math.PI/6;
    LTBstandbase.position.z = 0.75;
    LTBlgPVC.position.z = 40;
    LTBlgPVC.position.y = 8;
    LTBbottom.position.z = 37;
    LTBbottom.position.y = 8;
    LTBstand.position.z = 18.75;
    LTBstand.position.y = 8;
    LTBstand.rotation.x = 90*Math.PI/180;
    return largeturbinebase;
};
function makeSmallNacelle () {
    var smallnacelle = new THREE.Object3D();
    var SNbottomgeo = new THREE.BoxGeometry(4, 12, .25);
    var SNsidegeo = new THREE.BoxGeometry(2, 12, .25);
    var SNlgPVCgeo = new THREE.CylinderGeometry(.5, .5, 18, 16, 1, true);
    var SNsmlPVCgeo = new THREE.CylinderGeometry(.5, .5, 12, 16, 1, true);
    var SNjoingeo = new THREE.CylinderGeometry(1, 1, 10, 16, 1, true);
    var SNwheelgeo = new THREE.SphereGeometry(.75, 8, 6);
    var SNwoodmat = new THREE.MeshLambertMaterial({color: 0xffaa33});
    var SNPVCmat = new THREE.MeshLambertMaterial({color: 0x888888, side: THREE.DoubleSide});
//wheels
    var x = [1.5, -1.5, -1.5, 1.5];
    var y = [5.5, 5.5, -5.5, -5.5];
    for (var n = 0; n < 4; n++) {
	var wheel = new THREE.Mesh(SNwheelgeo, SNPVCmat);
	wheel.position.set(x[n], y[n], 1.5);
	smallnacelle.add(wheel);
}
//outer
    var radius  = 1;
    for (var l = 0; l < 6; l++) {
	var theta = l * Math.PI / 3 + Math.PI / 6;
	var x = Math.sin(theta) * radius;
	var z = 3.5 + Math.cos(theta) * radius;
	var mesh2 = new THREE.Mesh(SNsmlPVCgeo, SNPVCmat);
	mesh2.castShadow = true;
	mesh2.receiveShadow = true;
	mesh2.position.set(x, 0, z);
	smallnacelle.add(mesh2);
    };
//inner
    var r = Math.sqrt(3);
    for (var j = 0; j < 6; j++) {
	var theta = j * Math.PI / 3;
	var x = Math.sin(theta) * r;
	var z = 3.5 + Math.cos(theta) * r;
	var mesh = new THREE.Mesh(SNsmlPVCgeo, SNPVCmat);
	mesh.castShadow = true;
	mesh.receiveShadow = true;
	mesh.position.set(x, 0, z);
	smallnacelle.add(mesh);
    };
    var SNbottom = new THREE.Mesh(SNbottomgeo, SNwoodmat);
    var SNside = new THREE.Mesh(SNsidegeo, SNwoodmat);
    var SNlgPVC = new THREE.Mesh(SNlgPVCgeo, SNPVCmat);
    var SNjoin = new THREE.Mesh(SNjoingeo, SNPVCmat);
    smallnacelle.add(SNjoin);
    smallnacelle.add(SNlgPVC);
    smallnacelle.add(SNbottom);
    smallnacelle.add(SNside);
    SNlgPVC.position.z = 3.5;
    SNlgPVC.position.y = 2;
    SNbottom.position.z = 2;
    SNside.position.x = -2;
    SNside.position.z = 3;
    SNside.rotation.y = 90*Math.PI/180;
    SNjoin.position.z = 3;
    SNjoin.position.x = -7;
    SNjoin.position.y = -3;
    SNjoin.rotation.z = 90*Math.PI/180;
    return smallnacelle;
};
